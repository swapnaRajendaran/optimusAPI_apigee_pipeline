openapi: 3.0.1
info:
  title: Learning management system API
  description: APIs contains set of LMS endpoints which can be used by external clients as well for internal use.
  version: 1.0.0
servers:
  - url: "https://api-prod.thomsonreuters.com/trlearning/v1"
x-tr-proxy-name: Learning
x-tr-asset-insight-id: "202209"
x-tr-deploy-permissions:
  - swapna.rajendaran@thomsonreuters.com
x-tr-promote-permissions:
  - dc-8Fzo0l4QslugUV7h2VEPqg
x-tr-api-version: v1
x-tr-cors-enabled: true
x-tr-identity-provider: MachineToMachine
x-tr-logging-provider:
  - SumoLogic
  - DataDog
x-tr-apigee-base-path: /trlearning/v1
x-tr-servers:
  default:
    environments:
      dev:
        host: on8ruhv182.execute-api.us-east-1.amazonaws.com
        port: 443
        ssl: "true"
      test:
        host: on8ruhv182.execute-api.us-east-1.amazonaws.com
        port: 443
        ssl: "true"
      uat:
        host: on8ruhv182.execute-api.us-east-1.amazonaws.com
        port: 443
        ssl: "true"
      prod:
        host: on8ruhv182.execute-api.us-east-1.amazonaws.com
        port: 443
        ssl: "true"
    basePath: /prod
tags:
  - name: user
    description: LMS user
  - name: course
    description: LMS course
  - name: enrollments
    description: LMS enrollment
  - name: branch
    description: LMS branch
  - name: catalogs
    description: LMS catalogs
  - name: location
    description: LMS locations
  - name: sessions
    description: LMS sessions
  - name: additionalFields
    description: LMS additionalFields
  - name: learningplans
    description: LMS learning plans
paths:
  /users:
    get:
      tags:
        - user
      summary: Finds the list of users
      description: Fetches the list of users for which the logged in User has access. Various filter options available to fetch concentrated lists
      operationId: GetUserList
      parameters:
        - in: query
          name: filter
          description: Parameters to use for filtering results
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      requestBody:
        description: New user object can be added within the branch that the logged in user has access to
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
        required: true
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/users/{userId}":
    get:
      tags:
        - user
      summary: Find user by user id
      description: Fetch user info based on user id provided. The logged in user must have access to branch where the requested user id resides
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    put:
      tags:
        - user
      summary: Update user by user id
      description: Update user info for the user id provided. The logged in user must have access to branch where the requested user id resides
      operationId: UpdateUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      requestBody:
        description: user object that needs to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        required: true
      responses:
        "200":
          description: user updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    delete:
      tags:
        - user
      summary: Deletes a user based on id
      description: Deletes a user by id
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /courses:
    get:
      tags:
        - course
      summary: Finds the list of courses
      description: Fetches the list of courses for which the logged in User has access
      operationId: GetCourseList
      parameters:
        - in: query
          name: filter
          description: Parameters to use for filtering results
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetCourseListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    post:
      tags:
        - course
      summary: Add new course
      description: New course can be added within the catalog that the logged in user has access to
      operationId: CreateCourse
      requestBody:
        description: New course object can be added by the authorized user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCourseRequest"
          multipart/form-data:
              schema:
                $ref: "#/components/schemas/CourseMultipartPost"
      responses:
        "200":
          description: created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddCourseResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}":
    get:
      tags:
        - course
      summary: Finds course by course id
      description: Fetch course info based on course id provided. The logged in user must have access to catalog where the requested course id resides
      operationId: GetCourseByCourseId
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Auto generated using Swagger Inspector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCourseResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    put:
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      tags:
        - course
      summary: update course by course id
      description: Update course info for the course id provided. The logged in user must have access to the catalog where the requested course   id resides
      operationId: UpdateCourseByCourseId
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCourseRequest"
          multipart/form-data:
              schema:
                $ref: "#/components/schemas/CourseMultipartPut"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCourseResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    delete:
      tags:
        - course
      summary: Deletes a course based on id
      description: Deletes a course by id
      operationId: DeleteCourse
      parameters:
        - name: courseId
          in: path
          description: ID of course to delete
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCourseResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/learningPlans/{learningPlanId}":
    get:
      tags:
        - course
      summary: Finds course list by learning plan id
      description: Fetch course info based on learning plan id provided
      operationId: GetCourseListbyLearningPlanId
      parameters:
        - name: learningPlanId
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Auto generated using Swagger Inspector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCourseListByLearningPlanResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /branches:
    get:
      tags:
        - branch
      summary: Finds the list of branches
      description: Fetches the list of branches for which the logged in User has access
      operationId: GetBranchList
      responses:
        "200":
          description: Fetches the list of branches for which the logged in User has access
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetBranchListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /catalogs:
    get:
      tags:
        - catalogs
      summary: Finds the list of catalogs
      description: Fetches the list of catalogs for which the logged in User has access
      operationId: GetCatalogList
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetCatalogListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /groups:
    get:
      tags:
        - groups
      summary: Gets the list of groups
      description: Fetches the list of groups for which the logged in User has access
      operationId: GetGroupList
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetGroupListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/enrollments/users/{userId}":
    get:
      tags:
        - enrollments
      summary: Find enrollments by user id
      description: Fetch enrollment info based on user id provided. The logged in user must have access to branch where the requested user id resides
      operationId: GetEnrollmentListByUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: filter
          description: Parameters to use for filtering results
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnrollmentListByUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    post:
      tags:
        - enrollments
      summary: Sets user status for a particular course
      description: Sets a course status for a given course id and user id
      operationId: EnrollUser
      parameters:
        - name: userId
          in: path
          description: ID of user to enroll
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnrollUserRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrollUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    put:
      tags:
        - enrollments
      summary: Updates user status for a particular course
      description: Updates a course status for a given course id and user id
      operationId: UpdateEnrollUser
      parameters:
        - name: userId
          in: path
          description: ID of user to enroll
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassUserRequest"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassUserResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /locations:
    post:
      tags:
        - location
      summary: Adds a new location
      description: Adds a new location
      operationId: AddLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddLocationRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddLocationResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/locations/{id}":
    get:
      tags:
        - location
      summary: Find location by location id
      description: Fetch location info based on location id provided. The logged in user must have access to branch where the requested location id resides
      operationId: GetLocation
      parameters:
        - name: id
          in: path
          description: ID of location to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLocationResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    put:
      tags:
        - location
      summary: Updates location for a given id
      description: Updates location for a given id
      operationId: UpdateLocation
      parameters:
        - name: id
          in: path
          description: ID of location to update
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLocationRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateLocationResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    delete:
      tags:
        - location
      summary: Deletes a location based on id
      description: Deletes a location by id
      operationId: DeleteLocation
      parameters:
        - name: id
          in: path
          description: ID of location to delete
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLocationResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}/webinarsessions":
    post:
      tags:
        - sessions
      summary: Adds a webinar session for a particular course
      description: Adds a webinar session for a given course id
      operationId: AddWebinarSession
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddWebinarSessionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddWebinarSessionResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}/webinarsessions/{sessionId}":
    put:
      tags:
        - sessions
      summary: Updates a webinar session for a particular course
      description: Updates a webinar session for a given course id, session id and code
      operationId: UpdateWebinarSession
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: sessionId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddWebinarSessionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddWebinarSessionResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}/classroomsessions":
    post:
      tags:
        - sessions
      summary: Adds a classroom session for a particular course
      description: Adds a classroom session for a given course id
      operationId: AddClassroomSession
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddClassroomSessionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddClassroomSessionResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}/classroomsessions/{sessionId}":
    put:
      tags:
        - sessions
      summary: Updates a classroom session for a particular course
      description: Updates a classroom session for a given course id, session id, code
      operationId: UpdateClassroomSession
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: sessionId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddClassroomSessionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddClassroomSessionResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  /learningPlans:
    get:
      tags:
        - learningplans
      summary: Finds the list of learning plans
      description: Fetches the list of learning plans for which the logged in User has access
      operationId: GetLearningPlanList
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetLearningPlanListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/learningPlans/{learningPlanId}":
    get:
      tags:
        - learningplans
      summary: Get learning plan by learning plan id
      description: Fetch learning plan based on learning plan id provided
      operationId: GetLearningPlan
      parameters:
        - name: learningPlanId
          in: path
          description: ID of learning plan to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLearningPlanResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
    delete:
      tags:
        - learningplans
      summary: Deletes a learning plan based on the learning plan id
      description: Deletes a learning plan by the learning plan id
      operationId: DeleteLearningPlan
      parameters:
        - name: learningPlanId
          in: path
          description: ID of learning plan to delete
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLearningPlanResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/learningPlans/enroll":
    post:
      tags:
        - learningplans
      summary: Subscribe to a learning plan
      description: Subscribe to a learning plan
      operationId: SubscribeToLearningPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscribeToLearningPlanRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribeToLearningPlanResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/courses/{courseId}/sessions":
    get:
      tags:
        - sessions
      summary: Finds sessions by course id
      description: Fetch session info based on course id provided. The logged in user must have access to catalog where the requested course id resides
      operationId: GetSessionListByCourseId
      parameters:
        - name: courseId
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Auto generated using Swagger Inspector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
  "/additionalFields/{endpointName}":
    get:
      tags:
        - additionalFields
      summary: Finds the list of additional fields on a given endpoint
      description: Fetch additional fields info based on endpoint provided.
      operationId: GetAdditionalFieldsList
      parameters:
        - name: endpointName
          description: type of additional fields to return, either users or courses
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAdditionalFieldsListResponse"
        "401":
          description: Invalid credentials
          content: {}
        "403":
          description: Permission denied
          content: {}
        "404":
          description: Not Found
          content: {}
        "406":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimusErrorResponse"
      security:
        - OAuth2:
            - "write:lms"
            - "read:lms"
components:
  schemas:
    # Requests
    # ========================
    AddUserRequest:
      type: "object"
      properties:
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        branches:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "number"
            required:
              - "id"
        timezone:
          type: "string"
        level:
          type: "string"
          enum:
            - "USER"
            - "SUPER_ADMIN"
            - "POWER_USER"
        additionalFields:
          type: "object"
          additionalProperties:
            type: "string"
        expirationDate:
          type: "string"
      required:
        - "username"
        - "firstName"
        - "lastName"
        - "email"
        - "password"
        - "level"
    UpdateUserRequest:
      type: "object"
      properties:
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        branches:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "number"
            required:
              - "id"
        timezone:
          type: "string"
        level:
          type: "string"
          enum:
            - "USER"
            - "SUPER_ADMIN"
            - "POWER_USER"
        additionalFields:
          type: "object"
          additionalProperties:
            type: "string"
        expirationDate:
          type: "string"
    AddCourseRequest:
      type: "object"
      properties:
        catalogIds:
          type: "array"
          items:
            type: "number"
        courseType:
          type: "string"
          enum:
            - "elearning"
            - "webinar"
            - "classroom"
        courseCode:
          type: "string"
        courseTitle:
          type: "string"
        courseDescription:
          type: "string"
        courseObjectives:
          type: "string"
        courseCategory:
          type: "number"
        courseNavigationPolicy:
          type: "number"
        selfUnenrollment:
          type: "number"
        maximumNumberOfAttempts:
          type: "number"
        showCourse:
          type: "number"
        maxSubscriptionQuota:
          type: "number"
        allowOverbooking:
          type: "boolean"
        allowAutomaticallyEnroll:
          type: "boolean"
        demoMaterial:
          type: "string"
        courseSubscription:
          type: "number"
        enrollmentPolicy:
          type: "number"
        startDate:
          type: "string"
        endDate:
          type: "string"
        numberOfDaysValid:
          type: "number"
        validity:
          type: "number"
        courseAutoPlay:
          type: "number"
        majorTopics:
          type: "string"
        level:
          type: "string"
          enum:
            - "BASIC"
            - "INTERMEDIATE"
            - "ADVANCED"
            - "OVERVIEW"
            - "UPDATE"
        price:
          type: "number"
        onSale:
          type: "boolean"
        isPublished:
          type: "boolean"
        additionalFields:
          type: "object"
          additionalProperties:
            type: "string"
      required:
        - "catalogIds"
        - "courseType"
        - "courseTitle"
        - "courseDescription"
        - "isPublished"
    UpdateCourseRequest:
      type: "object"
      properties:
        catalogIds:
          type: "array"
          items:
            type: "number"
        courseType:
          type: "string"
          enum:
            - "elearning"
            - "webinar"
            - "classroom"
        courseCode:
          type: "string"
        courseTitle:
          type: "string"
        courseDescription:
          type: "string"
        courseObjectives:
          type: "string"
        courseCategory:
          type: "number"
        courseNavigationPolicy:
          type: "number"
        selfUnenrollment:
          type: "number"
        maximumNumberOfAttempts:
          type: "number"
        showCourse:
          type: "number"
        maxSubscriptionQuota:
          type: "number"
        allowOverbooking:
          type: "boolean"
        allowAutomaticallyEnroll:
          type: "boolean"
        demoMaterial:
          type: "string"
        courseSubscription:
          type: "number"
        enrollmentPolicy:
          type: "number"
        startDate:
          type: "string"
        endDate:
          type: "string"
        numberOfDaysValid:
          type: "number"
        validity:
          type: "number"
        courseAutoPlay:
          type: "number"
        majorTopics:
          type: "string"
        level:
          type: "string"
          enum:
            - "BASIC"
            - "INTERMEDIATE"
            - "ADVANCED"
            - "OVERVIEW"
            - "UPDATE"
        price:
          type: "number"
        onSale:
          type: "boolean"
        isPublished:
          type: "boolean"
        additionalFields:
          type: "object"
          additionalProperties:
            type: "string"
    CourseMultipartPost:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/AddCourseRequest"
        image:
          type: string
          format: binary
    CourseMultipartPut:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/UpdateCourseRequest"
        image:
          type: string
          format: binary
    PassUserRequest:
      type: "object"
      properties:
        courseId:
          type: "number"
        courseIds:
          type: "array"
          items:
            type: "number"
        level:
          type: "string"
          enum:
            - "COACH"
            - "STUDENT"
            - "INSTRUCTOR"
            - "TUTOR"
        enrollmentStatus:
          type: "string"
          enum:
            - "WAITING_LIST"
            - "SUBSCRIBED"
            - "ENROLLED"
            - "IN_PROGRESS"
            - "COMPLETED"
            - "SUSPEND"
        sessionId:
          type: "number"
        enrollmentFields:
          type: "object"
    EnrollUserRequest:
      type: "object"
      properties:
        courseId:
          type: "number"
        courseIds:
          type: "array"
          items:
            type: "number"
        level:
          type: "string"
          enum:
            - "COACH"
            - "STUDENT"
            - "INSTRUCTOR"
            - "TUTOR"
        sessionId:
          type: "number"
        enrollmentFields:
          type: "object"
      required:
        - "level"
    AddLocationRequest:
      type: "object"
      properties:
        locationName:
          type: "string"
        address:
          type: "string"
        country:
          type: "string"
        locationPhoneNumber:
          type: "string"
        locationEmail:
          type: "string"
        directions:
          type: "string"
        suggestedAccomodations:
          type: "string"
        otherInfo:
          type: "string"
      required:
        - "locationName"
        - "country"
        - "directions"
    UpdateLocationRequest:
      type: "object"
      properties:
        locationName:
          type: "string"
        address:
          type: "string"
        country:
          type: "string"
        locationPhoneNumber:
          type: "string"
        locationEmail:
          type: "string"
        directions:
          type: "string"
        suggestedAccomodations:
          type: "string"
        otherInfo:
          type: "string"
        images:
          type: "array"
          items:
            type: "string"
      required:
        - "locationName"
        - "country"
        - "directions"
    AddWebinarSessionRequest:
      type: "object"
      properties:
        code:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        maximumEnrollments:
          type: "number"
        completion:
          type: "string"
        dates:
          type: "array"
          items:
            type: "object"
            properties:
              day:
                type: "string"
              name:
                type: "string"
              description:
                type: "string"
              startHour:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9])$"
              endHour:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9])$"
              breakBegin:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9])$"
              breakEnd:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9])$"
              timezone:
                type: "string"
              duration:
                type: "number"
              instructorJoin:
                type: "string"
                description: "Instructor join time in minutes in a day. Must be between 0 and 1425 and must be a multiple of 15"
              learnerJoin:
                type: "string"
                description: "Learner join time in minutes in a day. Must be between 0 and 1425 and must be a multiple of 15"
              webinarTool:
                type: "string"
              url:
                type: "string"
              oauthAccount:
                type: "string"
            required:
              - "day"
              - "name"
              - "duration"
      required:
        - "name"
        - "maximumEnrollments"
        - "dates"
    AddClassroomSessionRequest:
      type: "object"
      properties:
        code:
          type: "string"
        sessionName:
          type: "string"
        maximumEnrollments:
          type: "number"
        minimumEnrollments:
          type: "number"
        lastSubscriptionDate:
          type: "string"
        dates:
          type: "array"
          items:
            type: "object"
            properties:
              day:
                type: "string"
              sessionDayName:
                type: "string"
              startHour:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"
              endHour:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"
              breakBegin:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"
              breakEnd:
                type: "string"
                pattern: "^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"
              timezone:
                type: "string"
              locationId:
                type: "number"
              classroomId:
                type: "number"
            required:
              - "day"
              - "startHour"
              - "endHour"
              - "locationId"
      required:
        - "sessionName"
        - "maximumEnrollments"
    AddLearningPlanRequest:
      type: "object"
      properties:
        learningPlanName:
          type: "string"
        learningPlanDescription:
          type: "string"
        learningPlanCode:
          type: "string"
        addToCourseCatalog:
          type: "boolean"
        dayOfValidity:
          type: "string"
        channels:
          type: "string"
        certificate:
          type: "string"
        certificationAndRetraining:
          type: "string"
        enrollmentEnabled:
          type: "boolean"
      required:
        - "learningPlanName"
        - "learningPlanDescription"
    SubscribeToLearningPlanRequest:
      type: "object"
      properties:
        userId:
          type: "number"
        learningPlanId:
          type: "number"
      required:
        - "userId"
        - "learningPlanId"
    UpdateLearningPlanRequest:
      type: "object"
      properties:
        learningPlanName:
          type: "string"
        learningPlanDescription:
          type: "string"
        learningPlanCode:
          type: "string"
        addToCourseCatalog:
          type: "boolean"
        dayOfValidity:
          type: "string"
        channels:
          type: "string"
        certificate:
          type: "string"
        certificationAndRetraining:
          type: "string"
        credits:
          type: "number"
        enrollmentEnabled:
          type: "boolean"
      required:
        - "learningPlanName"
        - "learningPlanDescription"
    LearningPlanMultipartPost:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/AddLearningPlanRequest"
        image:
          type: string
          format: binary
    LearningPlanMultipartPut:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/UpdateLearningPlanRequest"
        image:
          type: string
          format: binary
    # Responses
    # ========================
    AddWebinarSessionResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    AddClassroomSessionResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    DeleteLocationResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    UpdateLocationResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    AddLocationResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetLocationResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            locationName:
              type: "string"
            address:
              type: "string"
            country:
              type: "string"
            locationPhoneNumber:
              type: "string"
            locationEmail:
              type: "string"
            directions:
              type: "string"
            suggestedAccomodations:
              type: "string"
            otherInfo:
              type: "string"
            id:
              type: "integer"
            images:
              type: "array"
              items:
                type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    AddUserResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    UpdateUserResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    AddCourseResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    UpdateCourseResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetUserResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            username:
              type: "string"
            email:
              type: "string"
            firstName:
              type: "string"
            lastName:
              type: "string"
            password:
              type: "string"
            level:
              type: "string"
            branches:
              type: "array"
              items:
                type: "object"
                properties:
                  id:
                    type: "string"
            language:
              type: "string"
            uuid:
              type: "string"
            valid:
              type: "string"
            additionalFields:
              type: "object"
              properties:
                irsptin:
                  type: "string"
                ctech:
                  type: "string"
                cfp:
                  type: "string"
              additionalProperties:
                type: "string"
            isManager:
              type: "boolean"
            expirationDate:
              type: "string"
            timezone:
              type: "string"
            managerNames:
              type: "object"
              additionalProperties:
                type: "object"
                properties:
                  managerId:
                    type: "number"
                  managerName:
                    type: "string"
                  managerTitle:
                    type: "string"
                  managerUsername:
                    type: "string"
            managers:
              type: "array"
              items:
                type: "object"
                properties:
                  managerId:
                    type: "number"
                  managerName:
                    type: "string"
                  managerTitle:
                    type: "string"
                  managerTypeId:
                    type: "number"
                  managerUsername:
                    type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetUserListResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
              username:
                type: "string"
              email:
                type: "string"
              firstName:
                type: "string"
              lastName:
                type: "string"
              password:
                type: "string"
              level:
                type: "string"
              branches:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "string"
              language:
                type: "string"
              uuid:
                type: "string"
              valid:
                type: "string"
              additionalFields:
                type: "object"
                properties:
                  irsptin:
                    type: "string"
                  ctech:
                    type: "string"
                  cfp:
                    type: "string"
                additionalProperties:
                  type: "string"
              isManager:
                type: "boolean"
              expirationDate:
                type: "string"
              timezone:
                type: "string"
              managerNames:
                type: "object"
                additionalProperties:
                  type: "object"
                  properties:
                    managerId:
                      type: "number"
                    managerName:
                      type: "string"
                    managerTitle:
                      type: "string"
                    managerUsername:
                      type: "string"
              managers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    managerId:
                      type: "number"
                    managerName:
                      type: "string"
                    managerTitle:
                      type: "string"
                    managerTypeId:
                      type: "number"
                    managerUsername:
                      type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    DeleteUserResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    DeleteCourseResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetCourseResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            catalogId:
              type: "integer"
            catalogIds:
              type: "array"
              items:
                type: "number"
            id:
              type: "integer"
            courseType:
              type: "string"
            courseCode:
              type: "string"
            courseTitle:
              type: "string"
            courseDescription:
              type: "string"
            courseCategory:
              type: "integer"
            courseNavigationPolicy:
              type: "integer"
            selfUnenrollment:
              type: "integer"
            maxNumberOfAttempts:
              type: "string"
            showCourse:
              type: "integer"
            maxSubscriptionQuota:
              type: "integer"
            waitingList:
              type: "integer"
            demoMaterial:
              type: "string"
            courseSubscription:
              type: "integer"
            enrollmentPolicy:
              type: "integer"
            startDate:
              type: "string"
            endDate:
              type: "string"
            numberOfDaysValid:
              type: "integer"
            validity:
              type: "string"
            courseAutoPlay:
              type: "integer"
            price:
              type: "integer"
            instructors:
              type: "array"
              items:
                type: "string"
            image:
              type: "string"
            sessionList:
              type: "array"
              items:
                type: "object"
                properties:
                  sessionId:
                    type: "string"
                  sessionName:
                    type: "string"
                  sessionCode:
                    type: "string"
                  description:
                    type: "string"
                  maximumEnrollment:
                    type: "string"
                  minimumEnrollment:
                    type: "string"
                  lastSubscriptionDate:
                    type: "string"
                  minimumEnrollments:
                    type: "string"
                  startDate:
                    type: "string"
                  endDate:
                    type: "string"
                  status:
                    type: "string"
                  dates:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        day:
                          type: "string"
                        sessionDayName:
                          type: "string"
                        startHour:
                          type: "string"
                        endHour:
                          type: "string"
                        breakBegin:
                          type: "string"
                        breakEnd:
                          type: "string"
                        timezone:
                          type: "string"
                        locationId:
                          type: "integer"
                        classroomId:
                          type: "integer"
                        classroomName:
                          type: "integer"
                        attendanceStatus:
                          type: "string"
                        instructorJoin:
                          type: "string"
                        learnerJoin:
                          type: "string"
                        oauthAccount:
                          type: "string"
                        duration:
                          type: "number"
                        url:
                          type: "string"
                        webinarTool:
                          type: "string"
            isPublished:
              type: "boolean"
            onSale:
              type: "boolean"
            deepLink:
              type: "boolean"
            additionalFields:
              type: "object"
              properties:
                courseObjectives:
                  type: "string"
                prerequisitesList:
                  type: "string"
                advancedPreparations:
                  type: "string"
                targetAudience:
                  type: "string"
                majorTopics:
                  type: "string"
                level:
                  type: "string"
              additionalProperties:
                type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetSessionListResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              sessionId:
                type: "string"
              sessionName:
                type: "string"
              sessionCode:
                type: "string"
              description:
                type: "string"
              maximumEnrollment:
                type: "string"
              minimumEnrollment:
                type: "string"
              lastSubscriptionDate:
                type: "string"
              minimumEnrollments:
                type: "string"
              startDate:
                type: "string"
              endDate:
                type: "string"
              status:
                type: "string"
              dates:
                type: "array"
                items:
                  type: "object"
                  properties:
                    day:
                      type: "string"
                    sessionDayName:
                      type: "string"
                    startHour:
                      type: "string"
                    endHour:
                      type: "string"
                    breakBegin:
                      type: "string"
                    breakEnd:
                      type: "string"
                    timezone:
                      type: "string"
                    locationId:
                      type: "integer"
                    classroomId:
                      type: "integer"
                    classroomName:
                      type: "integer"
                    attendanceStatus:
                      type: "string"
                    instructorJoin:
                      type: "string"
                    learnerJoin:
                      type: "string"
                    oauthAccount:
                      type: "string"
                    duration:
                      type: "number"
                    url:
                      type: "string"
                    webinarTool:
                      type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetCourseListResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
              null:
                type: "string"
              Title:
                type: "string"
              description:
                type: "string"
              thumbnailImage:
                type: "string"
              startdate:
                type: "string"
              enddate:
                type: "string"
              language:
                type: "string"
              duration:
                type: "string"
              courseType:
                type: "string"
              object:
                type: "array"
                items:
                  type: "string"
              success:
                type: "boolean"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetBranchListResponse:
      type: object
      properties:
        success:
          type: boolean
        correlationId:
          type: string
        body:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              code:
                type: string
              title:
                type: string
              level:
                type: integer
              hasChildren:
                type: boolean
              children:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    code:
                      type: string
                    title:
                      type: string
                    level:
                      type: integer
                    hasChildren:
                      type: boolean
                    children:
                      type: array
                      items:
                        type: object
        statusCode:
          type: integer
    GetCatalogListResponse:
      type: object
      properties:
        success:
          type: boolean
        correlationId:
          type: string
        body:
          type: array
          items:
            type: object
            properties:
              courses:
                type: array
                items:
                  type: object
                  properties:
                    sessionDurationInMinutes:
                      type: string
                    courseType:
                      type: string
                    thumbnail:
                      type: string
                    sessionStart:
                      type: string
                    courseCode:
                      type: string
                    sessionName:
                      type: string
                    sessionEnd:
                      type: string
                    slugName:
                      type: string
                    sessionId:
                      type: string
                    dateSessionTimezone:
                      type: string
                    courseDescription:
                      type: string
                    sessionTimezone:
                      type: string
                    contentPartnerId:
                      type: string
                    courseTitle:
                      type: string
                    duration:
                      type: string
                    price:
                      type: integer
                    courseId:
                      type: integer
              name:
                type: string
              description:
                type: string
              id:
                type: integer
        statusCode:
          type: integer
    PassUserResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    EnrollUserResponse:
      type: object
      properties:
        success:
          type: boolean
        correlationId:
          type: string
        body:
          type: object
          properties:
            enrolled:
              type: string
            errors:
              type: string
        statusCode:
          type: integer
    GetLearningPlanListResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              learningPlanName:
                type: "string"
              learningPlanCode:
                type: "string"
              learningPlanDescription:
                type: "string"
              courses:
                type: "array"
                items:
                  type: "string"
              additionalFields:
                type: "object"
                properties: {}
                additionalProperties:
                  type: "string"
              links:
                type: "array"
                items:
                  type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    AddLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            id:
              type: "string"
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            learningPlanName:
              type: "string"
            learningPlanAccessLevel:
              type: "string"
            courses:
              type: "array"
              items:
                type: "object"
                properties:
                  courseName:
                    type: "string"
                  courseCode:
                    type: "string"
                  mandatoryOrOptional:
                    type: "string"
                  courseType:
                    type: "string"
                  prerequisiteCourses:
                    type: "string"
            success:
              type: "boolean"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetCourseListByLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              courseName:
                type: "string"
              courseCode:
                type: "string"
              mandatoryOrOptional:
                type: "string"
              courseType:
                type: "string"
              prerequisiteCourses:
                type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    DeleteLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    UpdateLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    SubscribeToLearningPlanResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            message:
              type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetGroupListResponse:
      type: "object"
      properties:
        body:
          type: "object"
          properties:
            groups:
              type: "array"
              items:
                type: "object"
                properties:
                  id:
                    type: "number"
                  name:
                    type: "string"
                  description:
                    type: "string"
                  membersCount:
                    type: "number"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    GetAdditionalFieldsListResponse:
      type: object
      properties:
        success:
          type: boolean
        correlationId:
          type: string
        body:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              type:
                type: string
              mandatory:
                type: boolean
              options:
                type: array
                items:
                  type: "object"
                  properties:
                    id:
                      type: integer
                    label:
                      type: string
              invisibleToUser:
                type: boolean
        statusCode:
          type: integer
    GetEnrollmentListByUserResponse:
      type: "object"
      properties:
        body:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
              courseType:
                type: "string"
              enrollDate:
                type: "string"
              completionDate:
                type: "string"
              endDate:
                type: "string"
              enrollmentStatus:
                type: "string"
              sessionList:
                type: "array"
                items:
                  type: "object"
                  properties:
                    sessionId:
                      type: "string"
                    sessionName:
                      type: "string"
                    startDate:
                      type: "string"
                    endDate:
                      type: "string"
                    status:
                      type: "string"
                    dates:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          day:
                            type: "string"
                          sessionDayName:
                            type: "string"
                          startHour:
                            type: "string"
                          endHour:
                            type: "string"
                          breakBegin:
                            type: "string"
                          breakEnd:
                            type: "string"
                          timezone:
                            type: "string"
                          locationId:
                            type: "integer"
                          classroomId:
                            type: "integer"
                          classroomName:
                            type: "integer"
                          attendanceStatus:
                            type: "string"
                    locations:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          locationName:
                            type: "string"
                          address:
                            type: "string"
                          countryId:
                            type: "string"
                          country:
                            type: "string"
                          countryCode:
                            type: "string"
                          zoneId:
                            type: "string"
                          locationPhoneNumber:
                            type: "string"
                          locationEmail:
                            type: "string"
                          directions:
                            type: "string"
                          suggestedAccomodations:
                            type: "string"
                          otherInfo:
                            type: "string"
                    minimumEnrollment:
                      type: "string"
                    sessionCode:
                      type: "string"
                    slugName:
                      type: "string"
                    description:
                      type: "string"
                    evaluationType:
                      type: "string"
                    additionalFields:
                      type: "array"
                      items:
                        type: "object"
                    maximumEnrollment:
                      type: "string"
                    lastSubscriptionDate:
                      type: "string"
                    enrolled:
                      type: "object"
                      properties:
                        countInstructor:
                          type: "string"
                        countInstructorWaitlist:
                          type: "string"
                        countTutor:
                          type: "string"
                        countTutorWaitlist:
                          type: "string"
                        countLearner:
                          type: "string"
                        countLearnerWaitlist:
                          type: "string"
                        isEnrolled:
                          type: "string"
                        countEnrolled:
                          type: "string"
                        status:
                          type: "string"
                        canEnrollSession:
                          type: "string"
        correlationId:
          type: "string"
        statusCode:
          type: "integer"
        success:
          type: "boolean"
    # Generic Responses
    # ========================
    OptimusErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        errorCode:
          type: string
        correlationId:
          type: string
        body:
          type: object
          properties:
            exception:
              type: string
            path:
              type: string
            error:
              type: string
            message:
              type: string
            timestamp:
              type: number
            status:
              type: integer
        statusCode:
          type: integer
    InvalidParameterResponse:
      type: object
      properties:
        success:
          type: boolean
        correlationId:
          type: string
        body:
          type: object
          properties:
            invalidParameters:
              type: array
              items:
                type: object
                properties:
                  reason:
                    type: string
                  requiredType:
                    type: string
                  parameter:
                    type: string
        statusCode:
          type: integer
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://api-dev.thomsonreuters.com/tr-oauth/v1/token"
          scopes:
            "write:lms": modify lms in your account
            "read:lms": read your lms
